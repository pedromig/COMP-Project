CHAR
ID(_do)
ASSIGN
INTLIT(0)
SEMI
CHAR
INTLIT(0)
ID(cantstartwithzero)
SEMI
INT
ID(calc)
LPAR
INT
ID(a)
COMMA
INT
ID(b)
RPAR
LBRACE
RETURN
ID(a)
PLUS
ID(b)
MUL
ID(a)
MINUS
ID(b)
SEMI
RBRACE
INTLIT(4)
ID(ea)
ASSIGN
CHRLIT('a')
SEMI
MINUS
Line 13, col 2: illegal character (.)
INT
ID(verify)
LPAR
INT
ID(value)
RPAR
LBRACE
DOUBLE
ID(not_used)
ASSIGN
REALLIT(.5e2)
COMMA
ID(another)
ASSIGN
REALLIT(2.1)
SEMI
IF
LPAR
ID(value)
GT
INTLIT(0)
AND
ID(value)
MOD
INTLIT(2)
EQ
INTLIT(0)
ID(and)
ID(value)
NE
INTLIT(6)
RPAR
LBRACE
RETURN
INTLIT(1)
SEMI
RBRACE
RETURN
MINUS
INTLIT(1)
SEMI
RBRACE
Line 22, col 1: illegal character (?)
RESERVED(long)
ID(reserved_function)
LPAR
RESERVED(long)
ID(value)
RPAR
LBRACE
RESERVED(for)
LPAR
INT
ID(i)
ASSIGN
INTLIT(0)
SEMI
ID(i)
LT
INTLIT(10)
SEMI
ID(i)
RESERVED(++)
RPAR
LBRACE
ID(value)
RESERVED(--)
SEMI
RBRACE
INTLIT(5)
BITWISEAND
INTLIT(2)
BITWISEXOR
INTLIT(2)
SEMI
RETURN
ID(value)
RBRACE
INT
ID(main)
LPAR
VOID
RPAR
LBRACE
CHRLIT(' ')
Line 32, col 9: invalid char constant ('   ')
INT
ID(a)
ASSIGN
ID(calc)
LPAR
INTLIT(2)
COMMA
INTLIT(3)
RPAR
SEMI
CHAR
ID(this_one_works)
ASSIGN
CHRLIT('c')
COMMA
ID(looks_like_a_string)
ASSIGN
Line 34, col 54: invalid char constant ('invalid')
SEMI
CHAR
ID(low_escape)
ASSIGN
CHRLIT('\000')
COMMA
ID(high_escape)
ASSIGN
CHRLIT('\777')
SEMI
ID(wrong_escape)
ASSIGN
Line 35, col 68: invalid char constant ('\800')
Line 35, col 75: invalid char constant ('\1234')
SEMI
CHAR
ID(forgot_to_finish)
ASSIGN
Line 36, col 29: unterminated char constant
IF
LPAR
ID(verify)
LPAR
ID(a)
RPAR
RPAR
LBRACE
ID(putchar)
LPAR
ID(this_one_works)
RPAR
SEMI
RBRACE
ELSE
LBRACE
ID(putchar)
LPAR
CHRLIT('1')
RPAR
SEMI
ID(putchar)
LPAR
CHRLIT('\n')
RPAR
SEMI
RBRACE
Line 44, col 5: unterminated char constant
Line 45, col 5: unterminated char constant
RETURN
INTLIT(0)
SEMI
RBRACE
Line 48, col 1: unterminated comment
