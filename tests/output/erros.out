Line 2, col 10: Invalid use of void type in declaration
Line 3, col 33: Invalid use of void type in declaration
Line 5, col 6: Invalid use of void type in declaration
Line 6, col 8: Symbol a already defined
Line 7, col 6: Invalid use of void type in declaration
Line 7, col 31: Invalid use of void type in declaration
Line 8, col 10: Invalid use of void type in declaration
Line 9, col 18: Invalid use of void type in declaration
Line 68, col 9: Unknown symbol num
Line 68, col 13: Operator == cannot be applied to types undef, int
Line 76, col 8: Symbol bola is not a function
Line 76, col 6: Conflicting types (got undef, expected int)
Line 80, col 12: Wrong number of arguments to function factorial (got 2, required 1)
Line 83, col 2: Unknown symbol func1
Line 83, col 2: Symbol func1 is not a function
Line 85, col 2: Unknown symbol func2
Line 85, col 2: Symbol func2 is not a function
Line 88, col 3: Unknown symbol statement1
Line 88, col 14: Operator = cannot be applied to types undef, int
Line 90, col 3: Unknown symbol statement2
Line 90, col 14: Operator = cannot be applied to types undef, int
Line 94, col 3: Unknown symbol statement1
Line 94, col 14: Operator = cannot be applied to types undef, int
Line 98, col 3: Unknown symbol statement2
Line 98, col 14: Operator = cannot be applied to types undef, int
Line 104, col 3: Unknown symbol statement2
Line 104, col 14: Operator = cannot be applied to types undef, int
Line 114, col 3: Unknown symbol statement1
Line 114, col 14: Operator = cannot be applied to types undef, int
Line 115, col 3: Unknown symbol statement2
Line 115, col 14: Operator = cannot be applied to types undef, int
Line 116, col 3: Unknown symbol statement3
Line 116, col 14: Operator = cannot be applied to types undef, int
Line 120, col 3: Unknown symbol statement1
Line 120, col 14: Operator = cannot be applied to types undef, int
Line 122, col 3: Unknown symbol statement1
Line 122, col 14: Operator = cannot be applied to types undef, int
Line 122, col 19: Unknown symbol statement2
Line 122, col 30: Operator = cannot be applied to types undef, int
Line 123, col 10: Unknown symbol ctoi
Line 123, col 10: Symbol ctoi is not a function
Line 123, col 6: Conflicting types (got undef, expected int)
Line 126, col 6: Wrong number of arguments to function tail_recursive_fac (got 1, required 2)
Line 130, col 2: Conflicting types (got void, expected int)
Line 135, col 5: Symbol a already defined
Line 139, col 9: Unknown symbol o
Line 139, col 12: Unknown symbol e
Line 139, col 10: Operator == cannot be applied to types undef, undef
Line 141, col 16: Unknown symbol abcd
Line 141, col 16: Conflicting types (got undef, expected int)
Line 149, col 6: Wrong number of arguments to function chama (got 1, required 0)
Line 153, col 10: Invalid use of void type in declaration
Line 201, col 9: Unknown symbol weird_char
Line 201, col 9: Symbol weird_char is not a function
Line 201, col 26: Operator < cannot be applied to types undef, char
Line 276, col 8: Conflicting types (got double(int), expected double(double))
Line 277, col 5: Conflicting types (got int(int), expected double(double))
Line 288, col 12: Symbol d already defined
Line 289, col 16: Symbol a already defined
Line 290, col 11: Symbol b already defined
Line 290, col 13: Symbol a already defined
Line 294, col 14: Symbol a already defined
Line 303, col 9: Unknown symbol infinite_putchar
Line 303, col 9: Symbol infinite_putchar is not a function
Line 304, col 12: Unknown symbol infinite_putchar
Line 304, col 12: Symbol infinite_putchar is not a function
Line 310, col 10: Symbol d already defined
Line 313, col 6: Symbol a already defined
Line 313, col 10: Symbol b already defined
Line 313, col 14: Symbol c already defined
Line 315, col 8: Symbol d already defined
Line 317, col 7: Symbol c already defined
Line 320, col 15: Symbol a already defined
Line 321, col 10: Symbol c already defined
Line 323, col 5: Unknown symbol function
Line 323, col 5: Symbol function is not a function
Line 323, col 19: Unknown symbol function
Line 323, col 19: Symbol function is not a function
Line 323, col 17: Operator + cannot be applied to types undef, undef
Line 325, col 15: Unknown symbol function
Line 325, col 15: Symbol function is not a function
Line 325, col 13: Operator < cannot be applied to types int, undef
Line 327, col 11: Unknown symbol nao_existe
Line 327, col 11: Symbol nao_existe is not a function
Line 327, col 9: Operator % cannot be applied to types double, undef
Line 327, col 9: Operator % cannot be applied to types double, undef
Line 337, col 9: Operator ^ cannot be applied to types double, int
Line 345, col 7: Operator = cannot be applied to types int, double
Line 346, col 15: Unknown symbol e
Line 346, col 15: Conflicting types (got undef, expected double)
===== Global Symbol Table =====
putchar	int(int)
getchar	int(void)
main	int(void)
a	int
bs	double
test	double
okokok	int(void)
new	void(void)
factorial	int(int)
recursive_factorial	int(int)
tail_recursive_fac	int(int,int)
soma	void(int,char)
subt	void(int,char,double)
b	int
d	int
c	int
t	double
chama	int(void)
ctoi	int(char)
block	char(char,char)
check_your_priorities	int(int,int,int)
not_block	char(char,char)
x	int
y	int
z	int
check_your_decimal	double(double,double)
main_0	int(void)
i	int
j	int
k	int
ch0	char
ch1	char
ch2	char
pow	double(double)
c1	char
c2	char
s	short
f1	char(void)
blah	int(void)
df	double(double,double)

===== Function main Symbol Table =====
return	int
i	int

===== Function okokok Symbol Table =====
return	int
i	int

===== Function factorial Symbol Table =====
return	int
number	int	param
answer	int

===== Function recursive_factorial Symbol Table =====
return	int
number	int	param

===== Function tail_recursive_fac Symbol Table =====
return	int
number	int	param
k	int	param
bola	int
i	int

===== Function chama Symbol Table =====
return	int

===== Function ctoi Symbol Table =====
return	int
c	char	param

===== Function block Symbol Table =====
return	char
a	char	param
b	char	param

===== Function check_your_priorities Symbol Table =====
return	int
a	int	param
b	int	param
d	int	param

===== Function not_block Symbol Table =====
return	char
a	char	param
b	char	param

===== Function check_your_decimal Symbol Table =====
return	double
a	double	param
b	double	param
PI	double

===== Function main_0 Symbol Table =====
return	int

===== Function f1 Symbol Table =====
return	char
s	short
i	int
d	double
e	double
a	int
b	double

===== Function df Symbol Table =====
return	double
d	double	param
dd	double	param
ch0	int
calc	int
ch1	char
a	char
b	short
c	int
x	double

Program
..FuncDeclaration
....Int
....Id(main)
....ParamList
......ParamDeclaration
........Void
..FuncDeclaration
....Int
....Id(main)
....ParamList
......ParamDeclaration
........Void
......ParamDeclaration
........Int
..FuncDeclaration
....Void
....Id(chara)
....ParamList
......ParamDeclaration
........Int
........Id(integer)
......ParamDeclaration
........Double
......ParamDeclaration
........Void
........Id(a)
......ParamDeclaration
........Double
......ParamDeclaration
........Int
......ParamDeclaration
........Char
..Declaration
....Int
....Id(a)
....IntLit(2) - int
..Declaration
....Void
....Id(as)
....Add
......IntLit(2)
......IntLit(2)
..Declaration
....Double
....Id(a)
....Sub
......Sub
........Sub
..........IntLit(2)
..........IntLit(2)
........IntLit(2)
......Mul
........Mul
..........IntLit(2)
..........IntLit(2)
........IntLit(2)
..Declaration
....Double
....Id(bs)
....Add - int
......IntLit(2) - int
......IntLit(2) - int
..Declaration
....Double
....Id(test)
..Declaration
....Void
....Id(a)
....Sub
......IntLit(2)
......Add
........Sub
..........Id(as)
..........Id(aasd)
........Mul
..........IntLit(2)
..........IntLit(2)
..Declaration
....Void
....Id(b)
..FuncDeclaration
....Int
....Id(test)
....ParamList
......ParamDeclaration
........Void
........Id(a)
......ParamDeclaration
........Int
..FuncDefinition
....Int
....Id(abcde)
....ParamList
......ParamDeclaration
........Int
........Id(a)
......ParamDeclaration
........Void
........Id(b)
......ParamDeclaration
........Void
........Id(a)
....FuncBody
......Return
........Id(b)
......While
........Eq
..........Id(i)
..........IntLit(0)
........If
..........Or
............Store
..............Id(i)
..............And
................IntLit(123)
................And
..................Lt
....................Id(i)
....................IntLit(2)
..................BitWiseAnd
....................Id(i)
....................IntLit(1)
............BitWiseOr
..............Id(i)
..............IntLit(1)
..........Store
............Id(i)
............IntLit(0123)
..........If
............Or
..............Eq
................Id(a)
................IntLit(2)
..............And
................Le
..................Id(b)
..................IntLit(2)
................Or
..................And
....................Ge
......................Id(c)
......................IntLit(3)
....................BitWiseXor
......................Id(d)
......................IntLit(0)
..................And
....................BitWiseOr
......................Id(x)
......................IntLit(1)
....................BitWiseAnd
......................Id(x)
......................IntLit(0)
............StatList
..............Store
................Id(b)
................Not
..................Id(b)
..............Store
................Id(c)
................Minus
..................Id(c)
..............Store
................Id(c)
................Mod
..................Minus
....................Id(c)
..................Minus
....................Id(d)
............Null
......StatList
........Store
..........Id(a)
..........IntLit(1)
........Store
..........Id(b)
..........IntLit(2)
......StatList
........Store
..........Id(a)
..........IntLit(1)
........Store
..........Id(b)
..........IntLit(2)
........Store
..........Id(c)
..........IntLit(3)
........Store
..........Id(d)
..........IntLit(4)
......Store
........Id(e)
........IntLit(4)
......Store
........Id(f)
........IntLit(5)
......If
........Id(a)
........Null
........StatList
..........Store
............Id(a)
............IntLit(1)
..........Store
............Id(b)
............IntLit(2)
......If
........Id(b)
........Null
........StatList
..........Store
............Id(x)
............IntLit(1)
..........Store
............Id(y)
............IntLit(2)
......If
........Id(c)
........Null
........Null
......If
........Id(d)
........StatList
..........Store
............Id(a)
............IntLit(1)
..........Store
............Id(b)
............IntLit(2)
..........Store
............Id(c)
............IntLit(3)
........Null
..FuncDefinition
....Int
....Id(okokok)
....ParamList
......ParamDeclaration
........Void
....FuncBody
......Declaration
........Int
........Id(i)
........Add - int
..........Id(i) - int
..........Id(i) - int
..FuncDeclaration
....Void
....Id(new)
....ParamList
......ParamDeclaration
........Void
..FuncDefinition
....Int
....Id(factorial)
....ParamList
......ParamDeclaration
........Int
........Id(number)
....FuncBody
......Declaration
........Int
........Id(answer)
........IntLit(1) - int
......While
........Ne - int
..........Id(number) - int
..........IntLit(0) - int
........StatList
..........Store - int
............Id(answer) - int
............Mul - int
..............Id(answer) - int
..............Id(number) - int
..........Store - int
............Id(number) - int
............Sub - int
..............Id(number) - int
..............IntLit(1) - int
......Return
........Id(answer) - int
..FuncDefinition
....Int
....Id(recursive_factorial)
....ParamList
......ParamDeclaration
........Int
........Id(number)
....FuncBody
......If
........Eq - int
..........Id(num) - undef
..........IntLit(0) - int
........Return
..........IntLit(1) - int
........Null
......Return
........Mul - int
..........Id(number) - int
..........Call - int
............Id(recursive_factorial) - int(int)
............Id(number) - int
..FuncDefinition
....Int
....Id(tail_recursive_fac)
....ParamList
......ParamDeclaration
........Int
........Id(number)
......ParamDeclaration
........Int
........Id(k)
....FuncBody
......Declaration
........Int
........Id(bola)
......Declaration
........Int
........Id(i)
........Call - undef
..........Id(bola) - int
..........IntLit(2) - int
..........IntLit(3) - int
......If
........Eq - int
..........Id(number) - int
..........IntLit(0) - int
........Return
..........IntLit(1) - int
........Null
......Return
........Call - int
..........Id(factorial) - int(int)
..........Sub - int
............Id(number) - int
............IntLit(1) - int
..........Mul - int
............Id(k) - int
............Id(number) - int
..FuncDefinition
....Int
....Id(main)
....ParamList
......ParamDeclaration
........Void
....FuncBody
......Call - undef
........Id(func1) - undef
........IntLit(1) - int
........IntLit(2) - int
........IntLit(3) - int
......Call - undef
........Id(func2) - undef
........Comma - int
..........IntLit(1) - int
..........IntLit(2) - int
........IntLit(3) - int
......If
........Id(a) - int
........Store - undef
..........Id(statement1) - undef
..........IntLit(1) - int
........Store - undef
..........Id(statement2) - undef
..........IntLit(2) - int
......If
........Id(a) - int
........Store - undef
..........Id(statement1) - undef
..........IntLit(1) - int
........Null
......If
........Id(a) - int
........Null
........Store - undef
..........Id(statement2) - undef
..........IntLit(2) - int
......If
........Id(a) - int
........Null
........Null
......While
........Id(a) - int
........Store - undef
..........Id(statement2) - undef
..........IntLit(2) - int
......While
........Id(a) - int
........Null
......While
........Id(a) - int
........Null
......While
........Id(a) - int
........StatList
..........Store - undef
............Id(statement1) - undef
............IntLit(1) - int
..........Store - undef
............Id(statement2) - undef
............IntLit(2) - int
..........Store - undef
............Id(statement3) - undef
............IntLit(3) - int
......Store - undef
........Id(statement1) - undef
........IntLit(1) - int
......StatList
........Store - undef
..........Id(statement1) - undef
..........IntLit(1) - int
........Store - undef
..........Id(statement2) - undef
..........IntLit(2) - int
......Declaration
........Int
........Id(i)
........Call - undef
..........Id(ctoi) - undef
..........Call - int
............Id(getchar) - int(void)
......Call - int
........Id(recursive_factorial) - int(int)
........Id(i) - int
......Call - int
........Id(tail_recursive_fac) - int(int,int)
........Id(i) - int
......Call - int
........Id(factorial) - int(int)
........Id(i) - int
......Return
........IntLit(0) - int
......Return
........Null
..FuncDeclaration
....Void
....Id(soma)
....ParamList
......ParamDeclaration
........Int
........Id(a)
......ParamDeclaration
........Char
........Id(b)
..FuncDeclaration
....Void
....Id(subt)
....ParamList
......ParamDeclaration
........Int
......ParamDeclaration
........Char
......ParamDeclaration
........Double
..Declaration
....Int
....Id(a)
....IntLit(3)
..Declaration
....Int
....Id(b)
....IntLit(5) - int
..Declaration
....Int
....Id(d)
....IntLit(3) - int
..Declaration
....Int
....Id(c)
....IntLit(5) - int
..Declaration
....Double
....Id(t)
....IntLit(3) - int
..FuncDefinition
....Int
....Id(chama)
....ParamList
......ParamDeclaration
........Void
....FuncBody
......If
........Eq - int
..........Id(o) - undef
..........Id(e) - undef
........StatList
..........While
............Id(abcd) - undef
............Null
..........Return
............Id(a) - int
........Null
......Return
........Id(c) - int
......Call - int
........Id(chama) - int(void)
........IntLit(4) - int
......Return
........Id(b) - int
..FuncDefinition
....Int
....Id(uauu)
....ParamList
......ParamDeclaration
........Void
......ParamDeclaration
........Void
....FuncBody
......Declaration
........Char
........Id(a)
........Sub
..........Add
............Minus
..............IntLit(4)
............IntLit(3)
..........Minus
............IntLit(3)
......Declaration
........Int
........Id(b)
........Sub
..........Add
............Id(a)
............IntLit(4)
..........Minus
............Id(a)
......Declaration
........Char
........Id(a)
........IntLit(5)
......Store
........Id(a)
........IntLit(5)
......Eq
........Id(a)
........IntLit(5)
......Lt
........Id(a)
........IntLit(5)
......While
........Not
..........Id(a)
........If
..........IntLit(2)
..........Store
............Id(a)
............Add
..............IntLit(3)
..............IntLit(3)
..........Store
............Id(a)
............Id(r)
......While
........Or
..........And
............Eq
..............Id(a)
..............IntLit(3)
............Lt
..............Id(b)
..............Id(a)
..........Lt
............Id(a)
............IntLit(3)
........StatList
..........Store
............Id(a)
............Id(b)
..........Store
............Id(b)
............IntLit(3)
..........While
............IntLit(1)
............Store
..............Id(a)
..............IntLit(0)
..........Store
............Id(c)
............IntLit(5)
......If
........And
..........Eq
............Id(a)
............IntLit(3)
..........BitWiseAnd
............Eq
..............Id(e)
..............IntLit(3)
............IntLit(5)
........Return
..........Id(b)
........Null
......Return
........Id(a)
..FuncDefinition
....Int
....Id(ctoi)
....ParamList
......ParamDeclaration
........Char
........Id(c)
....FuncBody
......If
........And - int
..........Ge - int
............Id(c) - char
............ChrLit('0') - int
..........Le - int
............Id(c) - char
............ChrLit('9') - int
........Return
..........Sub - int
............Id(c) - char
............ChrLit('0') - int
........Null
..FuncDefinition
....Char
....Id(block)
....ParamList
......ParamDeclaration
........Char
........Id(a)
......ParamDeclaration
........Char
........Id(b)
....FuncBody
......If
........Lt - int
..........Id(a) - char
..........Id(b) - char
........StatList
..........Store - char
............Id(a) - char
............Sub - int
..............Id(a) - char
..............IntLit(1) - int
..........Return
............Id(a) - char
........StatList
..........Store - char
............Id(b) - char
............Sub - int
..............Id(b) - char
..............IntLit(1) - int
..........Return
............Id(b) - char
..FuncDefinition
....Int
....Id(check_your_priorities)
....ParamList
......ParamDeclaration
........Int
........Id(a)
......ParamDeclaration
........Int
........Id(b)
......ParamDeclaration
........Int
........Id(d)
....FuncBody
......Return
........Add - int
..........Add - int
............Id(a) - int
............Add - int
..............Mul - int
................Mul - int
..................Id(b) - int
..................Add - int
....................Div - int
......................Minus - int
........................Id(d) - int
......................Id(c) - int
....................IntLit(3) - int
................Id(d) - int
..............Id(c) - int
..........Id(d) - int
..FuncDefinition
....Char
....Id(not_block)
....ParamList
......ParamDeclaration
........Char
........Id(a)
......ParamDeclaration
........Char
........Id(b)
....FuncBody
......If
........Lt - int
..........Call - undef
............Id(weird_char) - undef
............Id(a) - char
............Id(b) - char
..........Id(b) - char
........Return
..........Id(a) - char
........Return
..........Id(b) - char
..Declaration
....Int
....Id(x)
..Declaration
....Int
....Id(y)
..Declaration
....Int
....Id(z)
..FuncDefinition
....Double
....Id(check_your_decimal)
....ParamList
......ParamDeclaration
........Double
........Id(a)
......ParamDeclaration
........Double
........Id(b)
....FuncBody
......Declaration
........Double
........Id(PI)
........RealLit(3.14) - double
......Return
........Sub - double
..........Id(a) - double
..........Mul - double
............Id(b) - double
............Id(PI) - double
..FuncDefinition
....Int
....Id(main_0)
....ParamList
......ParamDeclaration
........Void
....FuncBody
......While
........Id(a) - int
........Return
..........Minus - int
............IntLit(1) - int
......If
........Eq - int
..........Id(a) - int
..........IntLit(2) - int
........Null
........Null
......If
........Eq - int
..........Id(a) - int
..........IntLit(2) - int
........Return
..........Id(a) - int
........Return
..........IntLit(5) - int
......While
........Eq - int
..........Id(b) - int
..........IntLit(3) - int
........StatList
..........If
............Eq - int
..............Id(a) - int
..............IntLit(2) - int
............Return
..............Id(a) - int
............Null
..........StatList
............If
..............Eq - int
................Id(a) - int
................IntLit(2) - int
..............Return
................Id(a) - int
..............Null
............If
..............Eq - int
................Id(a) - int
................IntLit(2) - int
..............Return
................Id(a) - int
..............Return
................IntLit(5) - int
............If
..............Eq - int
................Id(a) - int
................IntLit(2) - int
..............Return
................Id(a) - int
..............Null
............If
..............Eq - int
................Id(a) - int
................IntLit(2) - int
..............Return
................Id(a) - int
..............Return
................IntLit(5) - int
............If
..............Eq - int
................Id(a) - int
................IntLit(2) - int
..............Return
................Id(a) - int
..............Return
................IntLit(5) - int
..........Return
............IntLit(90) - int
..Declaration
....Int
....Id(i)
....IntLit(0) - int
..Declaration
....Int
....Id(j)
....IntLit(2) - int
..Declaration
....Int
....Id(k)
..Declaration
....Char
....Id(ch0)
..Declaration
....Char
....Id(ch1)
....IntLit(0) - int
..Declaration
....Char
....Id(ch2)
....ChrLit('0') - int
..FuncDeclaration
....Double
....Id(pow)
....ParamList
......ParamDeclaration
........Double
........Id(i)
..FuncDeclaration
....Double
....Id(pow)
....ParamList
......ParamDeclaration
........Double
........Id(i)
..FuncDeclaration
....Double
....Id(pow)
....ParamList
......ParamDeclaration
........Int
........Id(i)
..FuncDefinition
....Int
....Id(pow)
....ParamList
......ParamDeclaration
........Int
........Id(i)
....FuncBody
......Return
........Mul
..........Id(i)
..........Id(i)
..Declaration
....Char
....Id(c1)
..Declaration
....Char
....Id(c2)
..Declaration
....Short
....Id(s)
..Declaration
....Short
....Id(t)
..Declaration
....Int
....Id(i)
..Declaration
....Int
....Id(j)
..FuncDefinition
....Char
....Id(f1)
....ParamList
......ParamDeclaration
........Void
....FuncBody
......Declaration
........Short
........Id(s)
......Declaration
........Int
........Id(i)
......Declaration
........Double
........Id(d)
......Declaration
........Double
........Id(d)
......Declaration
........Double
........Id(e)
......Declaration
........Int
........Id(a)
......Declaration
........Int
........Id(a)
......Declaration
........Double
........Id(b)
......Declaration
........Double
........Id(b)
......Declaration
........Double
........Id(a)
......Return
........Id(c1) - char
..Declaration
....Char
....Id(a)
..Declaration
....Char
....Id(a)
....ChrLit('a')
..Declaration
....Char
....Id(b)
..FuncDeclaration
....Int
....Id(blah)
....ParamList
......ParamDeclaration
........Void
..FuncDeclaration
....Double
....Id(df)
....ParamList
......ParamDeclaration
........Double
......ParamDeclaration
........Double
..FuncDefinition
....Double
....Id(df)
....ParamList
......ParamDeclaration
........Double
........Id(d)
......ParamDeclaration
........Double
........Id(dd)
....FuncBody
......Declaration
........Int
........Id(ch0)
........IntLit(20) - int
......Declaration
........Int
........Id(calc)
......Declaration
........Char
........Id(ch1)
......If
........Store - int
..........Id(ch0) - int
..........Or - int
............IntLit(3) - int
............Eq - int
..............Id(ch0) - int
..............IntLit(3) - int
........Call - undef
..........Id(infinite_putchar) - undef
..........Id(ch0) - int
........Call - undef
..........Id(infinite_putchar) - undef
..........Store - int
............Id(ch0) - int
............Add - int
..............Id(ch0) - int
..............IntLit(10) - int
......Store - char
........Id(ch2) - char
........Call - int
..........Id(getchar) - int(void)
......Store - char
........Id(ch1) - char
........Call - int
..........Id(getchar) - int(void)
......Declaration
........Char
........Id(a)
........ChrLit('a') - int
......Declaration
........Short
........Id(b)
........IntLit(2) - int
......Declaration
........Int
........Id(c)
........IntLit(3) - int
......Declaration
........Double
........Id(d)
........RealLit(3.0)
......Declaration
........Double
........Id(x)
........RealLit(1.5) - double
......Declaration
........Int
........Id(a)
........IntLit(1)
......Declaration
........Int
........Id(b)
........IntLit(2)
......Declaration
........Int
........Id(c)
........IntLit(3)
......Declaration
........Short
........Id(d)
........IntLit(4)
......Declaration
........Char
........Id(c)
........ChrLit('a')
......Store - char
........Id(a) - char
........Add - int
..........Mul - int
............Minus - int
..............IntLit(1) - int
............IntLit(3) - int
..........Div - int
............IntLit(2) - int
............IntLit(4) - int
......Declaration
........Short
........Id(a)
......Declaration
........Char
........Id(c)
......Add - undef
........Call - undef
..........Id(function) - undef
..........IntLit(1) - int
........Call - undef
..........Id(function) - undef
..........IntLit(1) - int
......Mul - int
........IntLit(10) - int
........Lt - int
..........IntLit(5) - int
..........Call - undef
............Id(function) - undef
............IntLit(1) - int
......Mod - undef
........RealLit(5.5) - double
........Call - undef
..........Id(nao_existe) - undef
......Div - double
........RealLit(5.5) - double
........RealLit(5.5) - double
......Ge - int
........RealLit(5.5) - double
........IntLit(5) - int
......Ne - int
........RealLit(5.5) - double
........Id(a) - char
......Eq - int
........IntLit(5) - int
........Id(a) - char
......BitWiseXor - int
........RealLit(5.5) - double
........Id(c) - int
......And - int
........Id(a) - char
........Id(c) - int
......Add - int
........Id(c) - int
........Id(c) - int
......Store - int
........Id(c) - int
........IntLit(5) - int
......Store - int
........Id(c) - int
........RealLit(5.5) - double
......Return
........Call - double
..........Id(df) - double(double,double)
..........Id(d) - double
..........Id(e) - undef
